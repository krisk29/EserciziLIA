1)Definire una funzione segmentList che, data una lista di interi, la suddivide in sottoliste consecutive, rispettando le seguenti regole:

Ogni sottolista deve contenere numeri consecutivi in base alla differenza di 1 (esempio: [3, 4, 5] o [10, 11]).
Quando la sequenza si interrompe (esempio: passando da 5 a 8), inizia una nuova sottolista.
La funzione deve restituire una lista di sottoliste.

segmentList :: [Int] -> [[Int]]
Input: [3, 4, 5, 8, 9, 10, 3, 4, 12, 13, 14, 20]
Output: [[3, 4, 5], [8, 9, 10], [3, 4], [12, 13, 14], [20]]

2)Si considere il tipo

data AlberoBInt = Vuoto | Nodo Int AlberoBInt AlberoBInt

Scrivere una funzione sommalivello x a che restituisce la somma dei valori che appaiono in a al livello x.  Si deve restituire 0 se non vi sono nodi al livello x in a.  La radice è al livello 0.

Esempio

 si considerino:
albero1 = Nodo 1 (Nodo 2 Vuota Vuota) (Nodo 3 Vuota Vuota) 
albero2 = Vuota 
albero3 = Nodo 4 (Nodo 5 Vuota Vuota) (Nodo 6 (Nodo 7 Vuota Vuota) Vuota)

sommalivello 1 albero1 = 5
sommalivello 2 albero2 =  0
sommalivello  2 albero3 = 7

3)Descrivere il meccanismo di valutazione delle espressioni adottato da Haskell

4)Definire una predicato segmentList/2. segmentList(X,Y) è vero se X è una lista di interi e Y una lista di interi dove le liste in Y sono le sottoliste consecutive di X ottenute rispettando le seguenti regole:

Ogni sottolista deve contenere numeri consecutivi in base alla differenza di 1 (esempio: [3, 4, 5] o [10, 11]).
Quando la sequenza si interrompe (esempio: passando da 5 a 8), inizia una nuova sottolista.
La funzione deve restituire una lista di sottoliste.

segmentList([3, 4, 5, 8, 9, 10, 3, 4, 12, 13, 14, 20], [[3, 4, 5], [8, 9, 10], [3, 4], [12, 13, 14], [20]])

5)Supponendo di avere una base di fatti per i seguenti predicati: persona/2, amico/2, maschio/1, femmina/1, dove persona contenga come primo termine il nome della persona e come secondo la sua età-

Si definiscano i predicati seguenti:

p1(X): vero se e solo X tutte le amiche femmine di X sono più grandi di almeno un amico maschio di X
p2(X): vero se e solo se almeno uno degli amici più anziani di X (che non sono più piccoli di un altro amico di X) è maschio
stessaetadegliatri(X): vero se e solo se X ha un amico Y la cui età è uguale alla somma delle età degli altri amici di X

6)Riportare la definizione di most general unifier (mgu) di due termini della logica del primo ordine, descrivendo in pseudocodice un algoritmo in grado di calcolare il mgu di due termini